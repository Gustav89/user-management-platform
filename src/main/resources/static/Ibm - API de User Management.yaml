openapi: 3.0.0
info:
  title: User Management API
  description: API to manage users in the system
  version: 1.0.0
  contact:
    name: Gustavo Matias Alvarez
    email: alvarezgustavomatias@gmail.com
servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
paths:
  /users:
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: User object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '202':
          description: User creation request accepted and being processed asynchronously
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          description: Bad Request - Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - User already exists with same data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      summary: Get user details by id
      operationId: getUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: id in UUID of the user to retrieve
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found

  /users/search:
    get:
      summary: Search users with optional filters and pagination
      operationId: searchUsers
      parameters:
        - in: query
          name: name
          required: false
          schema:
            type: string
          description: Filter users by name (optional)
        - in: query
          name: age
          required: false
          schema:
            type: integer
          description: Filter users by age (optional)
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 0
          description: Page number for pagination (optional, default is 0)
        - in: query
          name: size
          required: false
          schema:
            type: integer
            default: 20
          description: Page size for pagination (optional, default is 20)
      responses:
        '200':
          description: List of users matching the filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchResponse'

components:
  schemas:
    UserCreateRequest:
      type: object
      properties:
        name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        age:
          type: integer
          example: 30
        subscription:
          type: boolean
          example: true
        postal_code:
          type: string
          example: "12345"
      required:
        - name
        - last_name
        - age
        - subscription
        - postal_code

    UserResponse:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        age:
          type: integer
          example: 30
        subscription:
          type: boolean
          example: true
        postal_code:
          type: string
          example: "12345"
        created_at:
          type: string
          format: date-time
          example: "2025-04-10T14:30:00Z"

    UserSearchResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
        pageable:
          type: object
          properties:
            page_number:
              type: integer
              example: 0
            page_size:
              type: integer
              example: 10
        total_elements:
          type: integer
          example: 100
        total_pages:
          type: integer
          example: 10

    StatusResponse:
      type: object
      properties:
        message:
          type: string
          example: "User creation request accepted"

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "Invalid input data"
        timestamp:
          type: string
          format: date-time
          example: "2025-04-11T14:30:00"
        status:
          type: integer
          example: 400